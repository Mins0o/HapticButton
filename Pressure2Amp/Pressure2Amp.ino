# define DURATION long(11500) // max 65535
# define WAVE_ sin500_zn
// 122-255 | 156-199 | 200-155 | 250-124 | 270-114 | 350-88 | 400-77 | 500-61
// Actual played frequency is about 60% of the calculation
//   78Hz  |   99Hz  |  126Hz  |  157Hz  |  171Hz  |  221Hz |  253Hz |  320Hz
# define LOOP_ 61

bool play_ = true;
int played_at = 0;
uint8_t i = 0;
int pres=0;

float pressure_scaler = 1.;
long scaled=65535;

int8_t sin122_zn[] = { // 255  
  0, 3, 6, 9, 12, 15, 18, 21, 24, 28, 31, 34, 37, 40, 43, 46, 48, 51, 54, 57, 60, 63, 65, 68, 71, 73, 76, 78, 81, 83, 85, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 109, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 124, 125, 126, 126, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 126, 126, 125, 124, 124, 123, 122, 121, 120, 119, 118, 117, 115, 114, 112, 111, 109, 108, 106, 104, 102, 100, 98, 96, 94, 92, 90, 88, 85, 83, 81, 78, 76, 73, 71, 68, 65, 63, 60, 57, 54, 51, 48, 46, 43, 40, 37, 34, 31, 28, 24, 21, 18, 15, 12, 9, 6, 3, 0, -4, -7, -10, -13, -16, -19, -22, -25, -29, -32, -35, -38, -41, -44, -47, -49, -52, -55, -58, -61, -64, -66, -69, -72, -74, -77, -79, -82, -84, -86, -89, -91, -93, -95, -97, -99, -101, -103, -105, -107, -109, -110, -112, -113, -115, -116, -118, -119, -120, -121, -122, -123, -124, -125, -125, -126, -127, -127, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -127, -127, -126, -125, -125, -124, -123, -122, -121, -120, -119, -118, -116, -115, -113, -112, -110, -109, -107, -105, -103, -101, -99, -97, -95, -93, -91, -89, -86, -84, -82, -79, -77, -74, -72, -69, -66, -64, -61, -58, -55, -52, -49, -47, -44, -41, -38, -35, -32, -29, -25, -22, -19, -16, -13, -10, -7, -4};
int8_t sin156_zn[] = { // 199  
  0, 4, 8, 12, 16, 20, 23, 27, 31, 35, 39, 43, 47, 50, 54, 58, 61, 65, 68, 71, 75, 78, 81, 84, 87, 90, 93, 96, 98, 101, 103, 105, 108, 110, 112, 114, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126, 126, 127, 127, 127, 127, 127, 127, 127, 126, 126, 125, 124, 123, 122, 121, 120, 119, 117, 115, 114, 112, 110, 108, 105, 103, 101, 98, 96, 93, 90, 87, 84, 81, 78, 75, 71, 68, 65, 61, 58, 54, 50, 47, 43, 39, 35, 31, 27, 23, 20, 16, 12, 8, 4, 0, -4, -8, -12, -16, -20, -23, -27, -31, -35, -39, -43, -47, -50, -54, -58, -61, -65, -68, -71, -75, -78, -81, -84, -87, -90, -93, -96, -98, -101, -103, -105, -108, -110, -112, -114, -115, -117, -119, -120, -121, -122, -123, -124, -125, -126, -126, -127, -127, -127, -128, -127, -127, -127, -126, -126, -125, -124, -123, -122, -121, -120, -119, -117, -115, -114, -112, -110, -108, -105, -103, -101, -98, -96, -93, -90, -87, -84, -81, -78, -75, -71, -68, -65, -61, -58, -54, -50, -47, -43, -39, -35, -31, -27, -23, -20, -16, -12, -8, -4};
int8_t sin200_zn[] = { // 155  
  0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 54, 59, 64, 68, 72, 76, 80, 84, 88, 92, 95, 99, 102, 105, 108, 110, 113, 115, 117, 119, 121, 122, 124, 125, 126, 127, 127, 127, 127, 127, 127, 127, 126, 125, 124, 122, 121, 119, 117, 115, 113, 110, 108, 105, 102, 99, 95, 92, 88, 84, 80, 76, 72, 68, 64, 59, 54, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, -5, -10, -15, -20, -25, -30, -35, -40, -45, -50, -54, -59, -64, -68, -72, -76, -80, -84, -88, -92, -95, -99, -102, -105, -108, -110, -113, -115, -117, -119, -121, -122, -124, -125, -126, -127, -127, -127, -128, -127, -127, -127, -126, -125, -124, -122, -121, -119, -117, -115, -113, -110, -108, -105, -102, -99, -95, -92, -88, -84, -80, -76, -72, -68, -64, -59, -54, -50, -45, -40, -35, -30, -25, -20, -15, -10, -5};
int8_t sin250_zn[] = { // 124  0, 
  6, 12, 19, 25, 31, 38, 44, 50, 55, 61, 67, 72, 77, 82, 87, 92, 96, 100, 104, 108, 111, 114, 117, 119, 121, 123, 125, 126, 127, 127, 127, 127, 127, 126, 125, 124, 122, 120, 118, 115, 112, 109, 106, 102, 98, 94, 89, 85, 80, 75, 69, 64, 58, 53, 47, 41, 34, 28, 22, 16, 9, 3, -3, -9, -16, -22, -28, -34, -41, -47, -53, -58, -64, -69, -75, -80, -85, -89, -94, -98, -102, -106, -109, -112, -115, -118, -120, -122, -124, -125, -126, -127, -127, -127, -127, -127, -126, -125, -123, -121, -119, -117, -114, -111, -108, -104, -100, -96, -92, -87, -82, -77, -72, -67, -61, -55, -50, -44, -38, -31, -25, -19, -12, -6};
int8_t sin270_zn[] = { // 114  
  0, 6, 13, 20, 27, 34, 41, 47, 54, 60, 66, 72, 78, 83, 88, 93, 98, 102, 106, 110, 113, 116, 119, 121, 123, 125, 126, 127, 127, 127, 127, 127, 125, 124, 122, 120, 118, 115, 111, 108, 104, 100, 95, 91, 86, 80, 75, 69, 63, 57, 50, 44, 37, 31, 24, 17, 10, 3, -3, -10, -17, -24, -31, -37, -44, -50, -57, -63, -69, -75, -80, -86, -91, -95, -100, -104, -108, -111, -115, -118, -120, -122, -124, -125, -127, -127, -127, -127, -127, -126, -125, -123, -121, -119, -116, -113, -110, -106, -102, -98, -93, -88, -83, -78, -72, -66, -60, -54, -47, -41, -34, -27, -20, -13, -6};
int8_t sin350_zn[] = { // 88
  0, 9, 18, 26, 35, 44, 52, 60, 68, 75, 83, 89, 95, 101, 106, 111, 115, 119, 122, 124, 126, 127, 127, 127, 127, 125, 123, 120, 117, 113, 109, 104, 98, 92, 86, 79, 72, 64, 56, 48, 39, 31, 22, 13, 4, -4, -13, -22, -31, -39, -48, -56, -64, -72, -79, -86, -92, -98, -104, -109, -113, -117, -120, -123, -125, -127, -127, -127, -127, -126, -124, -122, -119, -115, -111, -106, -101, -95, -89, -83, -75, -68, -60, -52, -44, -35, -26, -18, -9};
int8_t sin400_zn[] = { // 77
  0, 10, 20, 30, 40, 50, 59, 68, 76, 84, 92, 99, 105, 110, 115, 119, 122, 125, 127, 127, 127, 127, 125, 122, 119, 115, 110, 105, 99, 92, 84, 76, 68, 59, 50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50, -59, -68, -76, -84, -92, -99, -105, -110, -115, -119, -122, -125, -127, -127, -127, -127, -125, -122, -119, -115, -110, -105, -99, -92, -84, -76, -68, -59, -50, -40, -30, -20, -10};
int8_t sin500_zn[] = { // 61
  0, 12, 25, 38, 50, 62, 73, 83, 92, 101, 108, 114, 120, 123, 126, 127, 127, 126, 123, 120, 114, 108, 101, 92, 83, 73, 62, 50, 38, 25, 12, 0, -12, -25, -38, -50, -62, -73, -83, -92, -101, -108, -114, -120, -123, -126, -127, -127, -126, -123, -120, -114, -108, -101, -92, -83, -73, -62, -50, -38, -25, -12};

void setup(){
  //Serial.begin(115200);
  pinMode(11,OUTPUT);
  pinMode(7,INPUT_PULLUP);
  pinMode(6,INPUT_PULLUP);
  DDRB |= 0b00100000;
  cli();
  TCCR2A &= 0b00001100; // Reset Timer
  TCCR2B &= 0b00110000; // Reset Timer
  TCCR2A |= 0b10100001; // Phase Correct mode
  TCCR2B |= 0b00000001; // Prescaler 1
  // Frequency = 31250 Hz, 0.032 ms
  OCR2A = 128;

  TCCR1A &= 0b00001100; //Reset
  TCCR1B &= 0b00100000; //Reset
  TCCR1A |= 0b00000000;
  TCCR1B |= 0b00001010; //Prescaler 8
  OCR1A = DURATION;
  // Frequency = 30.518 Hz, 32 ms for duration = 65535
  
  TIMSK2 |= (1<<TOIE2);
  TCNT1=0;
  TCNT2=0;
  sei();
}

ISR(TIMER2_OVF_vect){
  if(play_){
    uint8_t enveloped = WAVE_[i++]*(DURATION-TCNT1)/scaled+128;
    OCR2A = enveloped;
    //OCR2A = WAVE_[i]+128; // Useful for checking actual frequency
    if (i>LOOP_){
      i=0;
    }
    if(TCNT1 < 65 || TCNT1 > DURATION-65){ // Racing resolving threshold_Found by trial and error
      play_ = false;
    }
  }
}


void loop(){
  pres = analogRead(A5);//*0.7+prev*0.3;
  if(abs(pres-played_at)>40){
    played_at = pres;
    if(~PIND & 0b10000000){
      // Decreasing
      pressure_scaler = max(0.2,(1000-played_at)/1000.);
    }else if(~PIND & 0b01000000){
      // Increasing
      pressure_scaler = min(1,0.2+played_at/1000.);
    }else{
      // No change
      pressure_scaler = 1;
    }
    scaled = float(DURATION)/pressure_scaler;
    i=0;
    TCNT1=0;
    TCNT2=0;
    play_=true;
    PORTB ^= 0b00100000;
  }
  //Serial.println(played_at);
}
