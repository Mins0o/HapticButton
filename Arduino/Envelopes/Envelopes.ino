# define DURATION long(21000) // max 65535
// 122-255 | 156-199 | 200-155 | 250-124 | 270-114 | 350-88 | 400-77 | 450-68 | 500-61
//    55   |    70   |    90   |   112   |   122   |   157  |   188  |   204  |  227  SIN
//    63   |    80   |   103   |   128   |   139   |   181  |   208  |   232  |  262  Triangle
//    69   |    88   |   112   |   140   |   153   |   197  |   225  |   253  |  283  Inverse Sawtooth
//    72   |    92   |   118   |   147   |   160   |   206  |   236  |   265  |  297  Sawtooth

# define DUR float(DURATION/255)
# define HALFDUR long(DURATION/2)

bool play_ = true;
int played_at = 0;
uint8_t i = 0;
int pres;

uint8_t enveloped;
uint8_t cutoff;

float sin_half[] = {0.0, 0.012271538285719925, 0.024541228522912288, 0.03680722294135883, 0.049067674327418015, 0.06132073630220858, 0.07356456359966743, 0.0857973123444399, 0.0980171403295606, 0.11022220729388306, 0.1224106751992162, 0.13458070850712617, 0.14673047445536175, 0.15885814333386145, 0.17096188876030122, 0.18303988795514095, 0.19509032201612825, 0.20711137619221856, 0.2191012401568698, 0.2310581082806711, 0.24298017990326387, 0.25486565960451457, 0.26671275747489837, 0.27851968938505306, 0.29028467725446233, 0.3020059493192281, 0.3136817403988915, 0.3253102921622629, 0.33688985339222005, 0.34841868024943456, 0.3598950365349881, 0.37131719395183754, 0.3826834323650898, 0.3939920400610481, 0.40524131400498986, 0.41642956009763715, 0.4275550934302821, 0.43861623853852766, 0.44961132965460654, 0.46053871095824, 0.47139673682599764, 0.4821837720791227, 0.49289819222978404, 0.5035383837257176, 0.5141027441932217, 0.524589682678469, 0.5349976198870972, 0.5453249884220465, 0.5555702330196022, 0.5657318107836131, 0.5758081914178453, 0.5857978574564389, 0.5956993044924334, 0.6055110414043255, 0.6152315905806268, 0.6248594881423863, 0.6343932841636455, 0.6438315428897914, 0.6531728429537768, 0.6624157775901718, 0.6715589548470183, 0.680600997795453, 0.6895405447370668, 0.6983762494089728, 0.7071067811865476, 0.7157308252838186, 0.7242470829514669, 0.7326542716724128, 0.7409511253549591, 0.7491363945234593, 0.7572088465064846, 0.765167265622459, 0.7730104533627369, 0.7807372285720945, 0.7883464276266062, 0.7958369046088835, 0.8032075314806448, 0.8104571982525948, 0.8175848131515837, 0.8245893027850253, 0.8314696123025452, 0.838224705554838, 0.844853565249707, 0.8513551931052652, 0.8577286100002721, 0.8639728561215867, 0.8700869911087113, 0.8760700941954066, 0.8819212643483549, 0.8876396204028539, 0.8932243011955153, 0.8986744656939538, 0.9039892931234433, 0.9091679830905223, 0.9142097557035307, 0.9191138516900578, 0.9238795325112867, 0.9285060804732156, 0.9329927988347388, 0.937339011912575, 0.9415440651830208, 0.9456073253805213, 0.9495281805930367, 0.9533060403541938, 0.9569403357322089, 0.9604305194155658, 0.9637760657954398, 0.9669764710448521, 0.970031253194544, 0.9729399522055601, 0.9757021300385286, 0.9783173707196277, 0.9807852804032304, 0.9831054874312163, 0.9852776423889412, 0.9873014181578584, 0.989176509964781, 0.99090263542778, 0.99247953459871, 0.9939069700023561, 0.9951847266721968, 0.996312612182778, 0.9972904566786902, 0.9981181129001492, 0.9987954562051724, 0.9993223845883495, 0.9996988186962042, 0.9999247018391445, 1.0, 0.9999247018391445, 0.9996988186962042, 0.9993223845883495, 0.9987954562051724, 0.9981181129001492, 0.9972904566786902, 0.996312612182778, 0.9951847266721969, 0.9939069700023561, 0.99247953459871, 0.99090263542778, 0.989176509964781, 0.9873014181578584, 0.9852776423889412, 0.9831054874312163, 0.9807852804032304, 0.9783173707196277, 0.9757021300385286, 0.9729399522055602, 0.970031253194544, 0.9669764710448521, 0.9637760657954398, 0.9604305194155659, 0.9569403357322089, 0.9533060403541939, 0.9495281805930367, 0.9456073253805214, 0.9415440651830208, 0.937339011912575, 0.9329927988347388, 0.9285060804732156, 0.9238795325112867, 0.9191138516900578, 0.9142097557035307, 0.9091679830905225, 0.9039892931234434, 0.8986744656939539, 0.8932243011955152, 0.8876396204028539, 0.881921264348355, 0.8760700941954066, 0.8700869911087115, 0.8639728561215868, 0.8577286100002721, 0.8513551931052652, 0.8448535652497072, 0.8382247055548382, 0.8314696123025453, 0.8245893027850252, 0.8175848131515837, 0.8104571982525948, 0.8032075314806449, 0.7958369046088836, 0.7883464276266063, 0.7807372285720946, 0.7730104533627371, 0.7651672656224591, 0.7572088465064847, 0.7491363945234593, 0.740951125354959, 0.7326542716724128, 0.7242470829514669, 0.7157308252838187, 0.7071067811865476, 0.6983762494089729, 0.689540544737067, 0.6806009977954532, 0.6715589548470186, 0.662415777590172, 0.6531728429537766, 0.6438315428897914, 0.6343932841636455, 0.6248594881423863, 0.6152315905806269, 0.6055110414043257, 0.5956993044924335, 0.585797857456439, 0.5758081914178454, 0.5657318107836135, 0.5555702330196022, 0.5453249884220464, 0.5349976198870972, 0.524589682678469, 0.5141027441932218, 0.5035383837257176, 0.49289819222978415, 0.4821837720791229, 0.4713967368259978, 0.4605387109582402, 0.4496113296546069, 0.43861623853852755, 0.42755509343028203, 0.41642956009763715, 0.4052413140049899, 0.39399204006104815, 0.3826834323650899, 0.3713171939518377, 0.35989503653498833, 0.3484186802494348, 0.33688985339222033, 0.32531029216226326, 0.3136817403988914, 0.30200594931922803, 0.2902846772544624, 0.27851968938505317, 0.2667127574748985, 0.2548656596045147, 0.24298017990326407, 0.23105810828067133, 0.21910124015687005, 0.20711137619221884, 0.1950903220161286, 0.1830398879551409, 0.17096188876030122, 0.15885814333386147, 0.1467304744553618, 0.13458070850712628, 0.12241067519921635, 0.11022220729388324, 0.09801714032956083, 0.08579731234444016, 0.07356456359966773, 0.06132073630220849, 0.049067674327417966, 0.03680722294135883, 0.024541228522912326, 0.012271538285720007};
int8_t sin_h[] = {0, 3, 6, 9, 12, 15, 18, 21, 25, 28, 31, 34, 37, 40, 43, 46, 49, 53, 56, 59, 62, 65, 68, 71, 74, 77, 80, 83, 86, 89, 92, 95, 97, 100, 103, 106, 109, 112, 115, 117, 120, 123, 126, 128, 131, 134, 136, 139, 142, 144, 147, 149, 152, 155, 157, 159, 162, 164, 167, 169, 171, 174, 176, 178, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 212, 214, 216, 217, 219, 221, 222, 224, 225, 227, 228, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 244, 245, 246, 247, 248, 249, 249, 250, 251, 251, 252, 252, 253, 253, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 256, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 253, 253, 252, 252, 251, 251, 250, 249, 249, 248, 247, 246, 245, 244, 244, 243, 242, 241, 239, 238, 237, 236, 235, 234, 232, 231, 230, 228, 227, 225, 224, 222, 221, 219, 217, 216, 214, 212, 211, 209, 207, 205, 203, 201, 199, 197, 195, 193, 191, 189, 187, 185, 183, 181, 178, 176, 174, 171, 169, 167, 164, 162, 159, 157, 155, 152, 149, 147, 144, 142, 139, 136, 134, 131, 128, 126, 123, 120, 117, 115, 112, 109, 106, 103, 100, 97, 95, 92, 89, 86, 83, 80, 77, 74, 71, 68, 65, 62, 59, 56, 53, 49, 46, 43, 40, 37, 34, 31, 28, 25, 21, 18, 15, 12, 9, 6, 3};
int8_t sin400_zn[]={ //77
  0, 10, 20, 30, 40, 50, 59, 68, 76, 84, 92, 99, 105, 110, 115, 119, 122, 125, 127, 127, 127, 127, 125, 122, 119, 115, 110, 105, 99, 92, 84, 76, 68, 59, 50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50, -59, -68, -76, -84, -92, -99, -105, -110, -115, -119, -122, -125, -127, -127, -127, -127, -125, -122, -119, -115, -110, -105, -99, -92, -84, -76, -68, -59, -50, -40, -30, -20, -10
};
int8_t sin450_zn[]={ //68
  0, 11, 23, 34, 45, 56, 66, 76, 85, 93, 101, 107, 113, 118, 122, 125, 127, 127, 127, 126, 124, 120, 116, 110, 104, 97, 89, 80, 71, 61, 50, 40, 28, 17, 5, -5, -17, -28, -40, -50, -61, -71, -80, -89, -97, -104, -110, -116, -120, -124, -126, -127, -127, -127, -125, -122, -118, -113, -107, -101, -93, -85, -76, -66, -56, -45, -34, -23, -11
};
int8_t sin500_zn[]={ //61
  0, 12, 25, 38, 50, 62, 73, 83, 92, 101, 108, 114, 120, 123, 126, 127, 127, 126, 123, 120, 114, 108, 101, 92, 83, 73, 62, 50, 38, 25, 12, 0, -12, -25, -38, -50, -62, -73, -83, -92, -101, -108, -114, -120, -123, -126, -127, -127, -126, -123, -120, -114, -108, -101, -92, -83, -73, -62, -50, -38, -25, -12
};
uint8_t loop_ = 61;



void setup(){
  //Serial.begin(115200);
  pinMode(11,OUTPUT);
  pinMode(7,INPUT_PULLUP); // These pins are for-
  pinMode(6,INPUT_PULLUP); // -test parameter selecting
  pinMode(5,INPUT_PULLUP);
  DDRB |= 0b00100000;
  cli();
  TCCR2A &= 0b00001100; // Reset Timer
  TCCR2B &= 0b00110000; // Reset Timer
  TCCR2A |= 0b10100001; // Phase Correct mode
  TCCR2B |= 0b00000001; // Prescaler 1
  // Frequency = 31250 Hz, 0.032 ms
  OCR2A = 128;

  TCCR1A &= 0b00001100; //Reset
  TCCR1B &= 0b00100000; //Reset
  TCCR1A |= 0b00000000;
  TCCR1B |= 0b00001010; //Prescaler 8
  OCR1A = DURATION;
  // Frequency = 30.518 Hz, 32 ms for duration = 65535
  
  TIMSK2 |= (1<<TOIE2);
  TCNT1=0;
  TCNT2=0;
  sei();
}

ISR(TIMER2_OVF_vect){
  if(play_){
    i++;
    if (i>loop_){
      i=0;
    }
    if(~PIND & 0b10000000){
      // Sine
      // 122-255 | 156-199 | 200-155 | 250-124 | 270-114 | 350-88 | 400-77 | 450-68 |  500-61
      //    55   |    70   |    90   |   112   |   122   |   157  |   188  |   204  |   227
      cutoff = 65;
      enveloped = sin500_zn[i]*sin_half[uint8_t(TCNT1/DUR)] + 128;
    }else if(~PIND & 0b01000000){
      // Triangle
      //    63   |    80   |   103   |   128   |   139   |   181  |   208  |   232  |   262
      cutoff = 80;
      enveloped = float(sin450_zn[i]*(HALFDUR-abs(HALFDUR-TCNT1)))/HALFDUR + 128;
    }else if(~PIND & 0b00100000){
      // Inverse Saw
      //    69   |    88   |   112   |   140   |   153   |   197  |   225  |   253  |   283
      cutoff = 80;
      enveloped = sin400_zn[i]*(DURATION-TCNT1)/DURATION + 128;
    }else{
      // Saw
      //    72   |    92   |   118   |   147   |   160   |   206  |   236  |   265  |   297
      cutoff = 65;
      enveloped = sin400_zn[i]*(long)(TCNT1)/DURATION + 128;
    }
      
    OCR2A = (uint8_t)enveloped;
    //OCR2A = sin450_zn[i]+128; // Useful for checking actual frequency
    
    if(TCNT1 > DURATION-cutoff || TCNT1 < cutoff){ // Racing resolving threshold_Found by trial and error
      play_ = false;
      OCR2A = 128;
    }
  }
}


void loop(){
  pres = analogRead(A5);//*0.7+prev*0.3;
  if(abs(pres-played_at)>50){
    if(~PIND & 0b10000000){
      loop_ = 61;
    }else if(~PIND & 0b01000000){
      loop_ = 68;
    }else{
      loop_ = 77;
    }
    played_at = pres;
    i=0;
    TCNT2=0;
    TCNT1=0;
    play_=true;
    PORTB ^= 0b00100000;
  }
}
